window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"deeplearningnumpy": {"fullname": "deeplearningnumpy", "modulename": "deeplearningnumpy", "kind": "module", "doc": "<p></p>\n"}, "deeplearningnumpy.activations": {"fullname": "deeplearningnumpy.activations", "modulename": "deeplearningnumpy.activations", "kind": "module", "doc": "<p></p>\n"}, "deeplearningnumpy.activations.ActivationReLU": {"fullname": "deeplearningnumpy.activations.ActivationReLU", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationReLU", "kind": "class", "doc": "<p>Rectified Linear Unit activation function.</p>\n"}, "deeplearningnumpy.activations.ActivationReLU.forward": {"fullname": "deeplearningnumpy.activations.ActivationReLU.forward", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationReLU.forward", "kind": "function", "doc": "<p>Propagates the inputs through the ReLU activation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to apply the activation function to.\nNegative values become 0, and positive values\nremain unchanged.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The output of the activation function. \nThe function is applied elementwise, and so the\noutput has the same dimensions as the input.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"fullname": "deeplearningnumpy.activations.ActivationReLU.getDerivative", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationReLU.getDerivative", "kind": "function", "doc": "<p>Gets the derivative of the activation function w.r.t the inputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to take the derivative with respect to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The resulting derivatives. Since the activation is applied elementwise,\nthe result has the same dimensions as the input. Positive values are\nreplaced by 1, and negative values by 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"fullname": "deeplearningnumpy.activations.ActivationLeakyReLU", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLeakyReLU", "kind": "class", "doc": "<p>Leaky ReLU activation function.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>slope</strong> (int):\nThe derivative for negative inputs. Setting <code>slope</code> to 0\ngives the same behaviour as ReLU activation. It is recommended\nthat slope is set at a value between 0 and 1 (inclusive) for stable\ntraining, for example <code>slope = 0.2</code>.</li>\n</ul>\n"}, "deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"fullname": "deeplearningnumpy.activations.ActivationLeakyReLU.__init__", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLeakyReLU.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">slope</span></span>)</span>"}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"fullname": "deeplearningnumpy.activations.ActivationLeakyReLU.forward", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLeakyReLU.forward", "kind": "function", "doc": "<p>Propagates the inputs through the Leaky ReLU activation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to apply the activation function to.\nNegative values <code>x</code> become <code>slope * x</code>, and positive values\nremain unchanged. Thus, for positive values of <code>slope</code>, negative\nvalues remain negative and positive values remain positive.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The output of the activation function. \nThe function is applied elementwise, and so the\noutput has the same dimensions as the input.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"fullname": "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLeakyReLU.getDerivative", "kind": "function", "doc": "<p>Gets the derivative of the activation function w.r.t the inputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to take the derivative with respect to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The resulting derivatives. Since the activation is applied elementwise,\nthe result has the same dimensions as the input. Positive values are\nreplaced by 1, and negative values by the value of <code>slope</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationLinear": {"fullname": "deeplearningnumpy.activations.ActivationLinear", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLinear", "kind": "class", "doc": "<p>Linear activation function.</p>\n"}, "deeplearningnumpy.activations.ActivationLinear.forward": {"fullname": "deeplearningnumpy.activations.ActivationLinear.forward", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLinear.forward", "kind": "function", "doc": "<p>Propagates the inputs through the Linear activation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to apply the activation function to.\nAll values remain unchanged.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The output of the activation function. \nThe function is applied elementwise, and so the\noutput has the same dimensions as the input.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"fullname": "deeplearningnumpy.activations.ActivationLinear.getDerivative", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLinear.getDerivative", "kind": "function", "doc": "<p>Gets the derivative of the activation function w.r.t the inputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to take the derivative with respect to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The resulting derivatives. Since the activation is applied elementwise,\nthe result has the same dimensions as the input. All values are replaced\nby 1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationLogistic": {"fullname": "deeplearningnumpy.activations.ActivationLogistic", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLogistic", "kind": "class", "doc": "<p>Logistic activation function.</p>\n"}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"fullname": "deeplearningnumpy.activations.ActivationLogistic.forward", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLogistic.forward", "kind": "function", "doc": "<p>Propagates the inputs through the Logistic activation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to apply the activation function to.\nEach value <code>x</code> is replaced by <code>1 / (1 + e^-x)</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The output of the activation function. \nThe function is applied elementwise, and so the\noutput has the same dimensions as the input.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"fullname": "deeplearningnumpy.activations.ActivationLogistic.getDerivative", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationLogistic.getDerivative", "kind": "function", "doc": "<p>Gets the derivative of the activation function w.r.t the inputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to take the derivative with respect to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The resulting derivatives. Since the activation is applied elementwise,\nthe result has the same dimensions as the input. All values <code>x</code> are replaced\nby <code>logistic(x) * (1 - logistic(x))</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationTanh": {"fullname": "deeplearningnumpy.activations.ActivationTanh", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationTanh", "kind": "class", "doc": "<p>Tanh activation function.</p>\n"}, "deeplearningnumpy.activations.ActivationTanh.forward": {"fullname": "deeplearningnumpy.activations.ActivationTanh.forward", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationTanh.forward", "kind": "function", "doc": "<p>Propagates the inputs through the Tanh activation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to apply the activation function to.\nEach value <code>x</code> is replaced by <code>(e^x - e^-x) / (e^x + e^-x)</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The output of the activation function. \nThe function is applied elementwise, and so the\noutput has the same dimensions as the input.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"fullname": "deeplearningnumpy.activations.ActivationTanh.getDerivative", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationTanh.getDerivative", "kind": "function", "doc": "<p>Gets the derivative of the activation function w.r.t the inputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to take the derivative with respect to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The resulting derivatives. Since the activation is applied elementwise,\nthe result has the same dimensions as the input. All values <code>x</code> are replaced\nby <code>sech^2(x) = 1 - tanh^2(x)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationSoftmax": {"fullname": "deeplearningnumpy.activations.ActivationSoftmax", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationSoftmax", "kind": "class", "doc": "<p>Softmax activation function.</p>\n\n<p>The derivative is built into the cross-entropy loss, so we just\nassign a derivative of 1. The effect of this is that the softmax\nactivation function can only be used with cross-entropy loss.</p>\n"}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"fullname": "deeplearningnumpy.activations.ActivationSoftmax.forward", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationSoftmax.forward", "kind": "function", "doc": "<p>Propagates the inputs through the Softmax activation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to apply the activation function to.\nEach value is divided by the sum of the values over\nthat last dimension.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The output of the activation function. \nThis is a vector function that operates over the last dimension,\nand the output has the same dimensions as the input.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"fullname": "deeplearningnumpy.activations.ActivationSoftmax.getDerivative", "modulename": "deeplearningnumpy.activations", "qualname": "ActivationSoftmax.getDerivative", "kind": "function", "doc": "<p>Gets the derivative of the activation function w.r.t the inputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (np.ndarray):\nThe inputs to take the derivative with respect to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The resulting derivatives. Since the activation is applied elementwise,\nthe result has the same dimensions as the input. All values are replaced\nby 1 since the true derivative is accounted for by the categorical cross-\nentropy loss.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.cost_functions": {"fullname": "deeplearningnumpy.cost_functions", "modulename": "deeplearningnumpy.cost_functions", "kind": "module", "doc": "<p></p>\n"}, "deeplearningnumpy.cost_functions.MSE": {"fullname": "deeplearningnumpy.cost_functions.MSE", "modulename": "deeplearningnumpy.cost_functions", "qualname": "MSE", "kind": "class", "doc": "<p>Mean squared error cost function.</p>\n"}, "deeplearningnumpy.cost_functions.MSE.getCost": {"fullname": "deeplearningnumpy.cost_functions.MSE.getCost", "modulename": "deeplearningnumpy.cost_functions", "qualname": "MSE.getCost", "kind": "function", "doc": "<p>Returns the cost when comparing the predicting outputs with the target outputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>yPred</strong> (numpy.ndarray):\nThe outputs generated by the neural network, where the first dimension should be\nthe number of outputs.</li>\n<li><strong>yReal</strong> (numpy.ndarray):\nThe desired outputs of the neural network, with the same dimensions as <code>yPred</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The total cost, averaged over all of the outputs generated by the neural network.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">yPred</span>, </span><span class=\"param\"><span class=\"n\">yReal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"fullname": "deeplearningnumpy.cost_functions.MSE.getDerivative", "modulename": "deeplearningnumpy.cost_functions", "qualname": "MSE.getDerivative", "kind": "function", "doc": "<p>Returns the derivative of the cost function w.r.t the output values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>yPred</strong> (numpy.ndarray):\nThe outputs generated by the neural network, where the first dimension should be\nthe number of outputs.</li>\n<li><strong>yReal</strong> (numpy.ndarray):\nThe desired outputs of the neural network, with the same dimensions as <code>yPred</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The derivative of the cost function with respect to each of the neural network outputs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">yPred</span>, </span><span class=\"param\"><span class=\"n\">yReal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"fullname": "deeplearningnumpy.cost_functions.BinaryCrossEntropy", "modulename": "deeplearningnumpy.cost_functions", "qualname": "BinaryCrossEntropy", "kind": "class", "doc": "<p>Binary cross entropy cost function.</p>\n"}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"fullname": "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost", "modulename": "deeplearningnumpy.cost_functions", "qualname": "BinaryCrossEntropy.getCost", "kind": "function", "doc": "<p>Returns the cost when comparing the predicting outputs with the target outputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>yPred</strong> (numpy.ndarray):\nThe outputs generated by the neural network, where the first dimension should be\nthe number of outputs.</li>\n<li><strong>yReal</strong> (numpy.ndarray):\nThe desired outputs of the neural network, with the same dimensions as <code>yPred</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The total cost, averaged over all of the outputs generated by the neural network.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">yPred</span>, </span><span class=\"param\"><span class=\"n\">yReal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"fullname": "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative", "modulename": "deeplearningnumpy.cost_functions", "qualname": "BinaryCrossEntropy.getDerivative", "kind": "function", "doc": "<p>Returns the derivative of the cost function w.r.t the output values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>yPred</strong> (numpy.ndarray):\nThe outputs generated by the neural network, where the first dimension should be\nthe number of outputs.</li>\n<li><strong>yReal</strong> (numpy.ndarray):\nThe desired outputs of the neural network, with the same dimensions as <code>yPred</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The derivative of the cost function with respect to each of the neural network outputs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">yPred</span>, </span><span class=\"param\"><span class=\"n\">yReal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"fullname": "deeplearningnumpy.cost_functions.CategoricalCrossEntropy", "modulename": "deeplearningnumpy.cost_functions", "qualname": "CategoricalCrossEntropy", "kind": "class", "doc": "<p>Categorical cross entropy cost function.</p>\n"}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"fullname": "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost", "modulename": "deeplearningnumpy.cost_functions", "qualname": "CategoricalCrossEntropy.getCost", "kind": "function", "doc": "<p>Returns the cost when comparing the predicting outputs with the target outputs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>yPred</strong> (numpy.ndarray):\nThe outputs generated by the neural network, where the first dimension should be\nthe number of outputs.</li>\n<li><strong>yReal</strong> (numpy.ndarray):\nThe desired outputs of the neural network, with the same dimensions as <code>yPred</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The total cost, averaged over all of the outputs generated by the neural network.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">yPred</span>, </span><span class=\"param\"><span class=\"n\">yReal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"fullname": "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative", "modulename": "deeplearningnumpy.cost_functions", "qualname": "CategoricalCrossEntropy.getDerivative", "kind": "function", "doc": "<p>Returns the derivative of the cost function w.r.t the output values before the\nsoftmax activation function is applied. Thus this incorporates the derivative of\nsoftmax with that of the categorical cross entropy cost function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>yPred</strong> (numpy.ndarray):\nThe outputs generated by the neural network, where the first dimension should be\nthe number of outputs.</li>\n<li><strong>yReal</strong> (numpy.ndarray):\nThe desired outputs of the neural network, with the same dimensions as <code>yPred</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The derivative of the cost function with respect to each of the neural network outputs\n(before softmax activation).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">yPred</span>, </span><span class=\"param\"><span class=\"n\">yReal</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers": {"fullname": "deeplearningnumpy.layers", "modulename": "deeplearningnumpy.layers", "kind": "module", "doc": "<p></p>\n"}, "deeplearningnumpy.layers.Layer": {"fullname": "deeplearningnumpy.layers.Layer", "modulename": "deeplearningnumpy.layers", "qualname": "Layer", "kind": "class", "doc": "<p>Base class describing shared functionality of Dense, MaxPool and Convolutional layers.</p>\n"}, "deeplearningnumpy.layers.Layer.updateWeights": {"fullname": "deeplearningnumpy.layers.Layer.updateWeights", "modulename": "deeplearningnumpy.layers", "qualname": "Layer.updateWeights", "kind": "function", "doc": "<p>Updates the weights and biases of this layer according to the accumulated gradients and the learning rate.</p>\n\n<p>If this <code>Layer</code> object does not have any associated weights or biases (e.g. <code>MaxPoolLayer</code>), then calling this function has no effect.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>learningRate</strong> (float):\nControls the amount by which the weights and biases of the layer are changed on each step. \nBoth the weights and biases are updated at the same rate.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">learningRate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"fullname": "deeplearningnumpy.layers.Layer.getOutputDeltas", "modulename": "deeplearningnumpy.layers", "qualname": "Layer.getOutputDeltas", "kind": "function", "doc": "<p>Calculates delta values for each neuron, assuming that this is the output layer.</p>\n\n<p>In other words, this function computes the derivative of the cost function with respect\nto each of this layer's outputs. This function should only be called if this <code>Layer</code> object\nis the last layer of some <code>NeuralNetwork</code> object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>expectedValues</strong> (numpy.ndarray):\nThe desired values for this layer's outputs. This parameter should have dimensions <code>(batch_size, out_1, out_2, ..., out_n)</code>,\nwhere <code>(out_1, out_2, ..., out_n)</code> are the dimensions of this layer's outputs.</li>\n<li><strong>costFunction</strong> (CostFunction):\nA cost function whose derivative is calculated with respect to the outputs of this layer.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p><code>CostFunction</code> is any of <code>MSE</code>, <code>BinaryCrossEntropy</code>, or <code>CategoricalCrossEntropy</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expectedValues</span>, </span><span class=\"param\"><span class=\"n\">costFunction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"fullname": "deeplearningnumpy.layers.Layer.getWeightGradients", "modulename": "deeplearningnumpy.layers", "qualname": "Layer.getWeightGradients", "kind": "function", "doc": "<p>Returns the derivative of the cost function with respect to this layer's weights.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The gradients with respect to the weights. Has dimensions equal to the dimensions of the weights.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"fullname": "deeplearningnumpy.layers.Layer.getBiasGradients", "modulename": "deeplearningnumpy.layers", "qualname": "Layer.getBiasGradients", "kind": "function", "doc": "<p>Returns the derivative of the cost function with respect to this layer's biases.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The gradients with respect to the biases. Has dimensions equal to the dimensions of the biases.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.DenseLayer": {"fullname": "deeplearningnumpy.layers.DenseLayer", "modulename": "deeplearningnumpy.layers", "qualname": "DenseLayer", "kind": "class", "doc": "<p>A fully-connected layer of a neural network.</p>\n\n<p>Weights are initialised using He initialisation, and biases are zero-initialised.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>nInputs</strong> (int):\nThe total number of inputs to this layer.</li>\n<li><strong>nOutputs</strong> (int):\nThe total number of outputs (i.e. neurons) of this layer.</li>\n<li><strong>activationFunction</strong> (Activation):\nThe activation function to be applied after taking the weighted sum of the inputs.</li>\n</ul>\n", "bases": "Layer"}, "deeplearningnumpy.layers.DenseLayer.__init__": {"fullname": "deeplearningnumpy.layers.DenseLayer.__init__", "modulename": "deeplearningnumpy.layers", "qualname": "DenseLayer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nInputs</span>, </span><span class=\"param\"><span class=\"n\">nOutputs</span>, </span><span class=\"param\"><span class=\"n\">activationFunction</span></span>)</span>"}, "deeplearningnumpy.layers.DenseLayer.forward": {"fullname": "deeplearningnumpy.layers.DenseLayer.forward", "modulename": "deeplearningnumpy.layers", "qualname": "DenseLayer.forward", "kind": "function", "doc": "<p>Calculates the weighted sum of <code>inputs</code> and stores the output after applying the activation function to it.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (numpy.ndarray):\nThe inputs to the layer, which should have dimensions <code>(batchSize, nInputs)</code>.\nOtherwise, the inputs will be flattened beyond axis <code>0</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"fullname": "deeplearningnumpy.layers.DenseLayer.getDeltas", "modulename": "deeplearningnumpy.layers", "qualname": "DenseLayer.getDeltas", "kind": "function", "doc": "<p>Calculates gradients for each neuron in this layer.</p>\n\n<p>These gradients include the derivative of the cost function with respect to\nthe inputs, the weights, and the biases.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>outputDeltas</strong> (numpy.ndarray):\nThe derivative of the cost function with respect to each of the outputs of this layer.\nEquivalently, the derivative of the cost function with respect to each of the inputs of the next layer\n(if there is a next layer).\nHas dimensions <code>(batchSize, nOutputs)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outputDeltas</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.ConvolutionalLayer": {"fullname": "deeplearningnumpy.layers.ConvolutionalLayer", "modulename": "deeplearningnumpy.layers", "qualname": "ConvolutionalLayer", "kind": "class", "doc": "<p>A convolutional layer of a neural network.</p>\n\n<p>Weights are initialised using He initialisation, and biases are zero-initialised.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>nOfFilters</strong> (int):\nThe number of filters convolved over the input.</li>\n<li><strong>inputSize</strong> (int):\nEqual to <code>width</code> if the dimensions of the input are <code>(batchSize, depth, width, width)</code>.</li>\n<li><strong>filterSize</strong> (int):\nThe width / height of each of the filters. Note that this means only square filters can be used.</li>\n<li><strong>previousNOfFilters</strong> (int):\nThe number of filters used in the previous layer. If the previous layer was not a <code>ConvolutionalLayer</code>,\nthen this should be set to 1.</li>\n<li><strong>activationFunction</strong> (Activation):\nThe activation function to be applied after convolving the filters over the inputs.</li>\n<li><strong>stride</strong> (int, optional):\nThe step size to move the kernel by in each cross-correlation operation. Defaults to 1.</li>\n</ul>\n", "bases": "Layer"}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"fullname": "deeplearningnumpy.layers.ConvolutionalLayer.__init__", "modulename": "deeplearningnumpy.layers", "qualname": "ConvolutionalLayer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">nOfFilters</span>,</span><span class=\"param\">\t<span class=\"n\">inputSize</span>,</span><span class=\"param\">\t<span class=\"n\">filterSize</span>,</span><span class=\"param\">\t<span class=\"n\">previousNOfFilters</span>,</span><span class=\"param\">\t<span class=\"n\">activationFunction</span>,</span><span class=\"param\">\t<span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"fullname": "deeplearningnumpy.layers.ConvolutionalLayer.forward", "modulename": "deeplearningnumpy.layers", "qualname": "ConvolutionalLayer.forward", "kind": "function", "doc": "<p>Performs the cross-correlation of each filter over each input in the batch\nand stores the result after applying the activation function.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (numpy.ndarray):\nThe inputs to which the cross-correlation operation is to be applied.\nHas dimensions <code>(batchSize, depth, inputSize, inputSize)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"fullname": "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate", "modulename": "deeplearningnumpy.layers", "qualname": "ConvolutionalLayer.crossCorrelate", "kind": "function", "doc": "<p>Performs the cross-correlation of the filters over the inputs.</p>\n\n<p>If <code>images</code> has dimensions <code>(batchSize, imagesDepth, inputSize, inputSize)</code>,\nand <code>filters</code> has dimensions <code>(nFilters, filterDepth, filterSize, filterSize)</code>,\nwe require that <code>imagesDepth = filterDepth</code>.\nInsert new axes at position 0 in <code>images</code> and <code>filters</code> while either has fewer than\n4 dimensions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>images</strong> (numpy.ndarray):\nThe images to be convolved over.</li>\n<li><strong>filters</strong> (numpy.ndarray):\nThe filters to convolve over <code>images</code>.</li>\n<li><strong>stride</strong> (int):\nThe step size to move each kernel by in the cross-correlation operations. Defaults to 1.</li>\n<li><strong>biases</strong> (numpy.ndarray):\nAdded to the results after the cross-correlations has been applied.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The result of the cross-correlation. Has dimensions <code>(batchSize, nFilters, outputSize, outputSize)</code>,\nwhere <code>outputSize = (inputSize - filterSize) // stride + 1</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">images</span>, </span><span class=\"param\"><span class=\"n\">filters</span>, </span><span class=\"param\"><span class=\"n\">stride</span>, </span><span class=\"param\"><span class=\"n\">biases</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"fullname": "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas", "modulename": "deeplearningnumpy.layers", "qualname": "ConvolutionalLayer.getDeltas", "kind": "function", "doc": "<p>Calculates gradients for each neuron in this layer.</p>\n\n<p>These gradients include the derivative of the cost function with respect to\nthe inputs, the weights, and the biases.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>outputDeltas</strong> (numpy.ndarray):\nThe derivative of the cost function with respect to each of the outputs of this layer.\nEquivalently, the derivative of the cost function with respect to each of the inputs of the next layer\n(if there is a next layer).\nHas dimensions <code>(batchSize, nFilters, outputWidth, outputWidth)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outputDeltas</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.MaxPoolLayer": {"fullname": "deeplearningnumpy.layers.MaxPoolLayer", "modulename": "deeplearningnumpy.layers", "qualname": "MaxPoolLayer", "kind": "class", "doc": "<p>A max pooling layer of a neural network.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>windowSize</strong> (int):\nThe maximum value in each windowSize x windowSize submatrix is propagated to the next layer.</li>\n<li><strong>stride</strong> (int, optional):\nThe step size to move the window by after each pooling operation. Defaults to 1.</li>\n</ul>\n", "bases": "Layer"}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"fullname": "deeplearningnumpy.layers.MaxPoolLayer.__init__", "modulename": "deeplearningnumpy.layers", "qualname": "MaxPoolLayer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">windowSize</span>, </span><span class=\"param\"><span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"fullname": "deeplearningnumpy.layers.MaxPoolLayer.forward", "modulename": "deeplearningnumpy.layers", "qualname": "MaxPoolLayer.forward", "kind": "function", "doc": "<p>Performs max pooling to generate this layer's output.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (numpy.ndarray):\nThe inputs to which the max pooling operation is to be applied.\nHas dimensions <code>(batchSize, depth, inputSize, inputSize)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"fullname": "deeplearningnumpy.layers.MaxPoolLayer.maxPool", "modulename": "deeplearningnumpy.layers", "qualname": "MaxPoolLayer.maxPool", "kind": "function", "doc": "<p>Performs max pooling to downsample the matrix.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>images</strong> (numpy.ndarray):\nThe images to apply max pooling to.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The result of the max pooling. Has dimensions <code>(batchSize, depth, outputSize, outputSize)</code>,\nwhere <code>(batchSize, depth, inputSize, inputSize)</code> are the dimensions of the input, and\n<code>outputSize = (inputSize - windowSize) // stride + 1</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">images</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"fullname": "deeplearningnumpy.layers.MaxPoolLayer.getDeltas", "modulename": "deeplearningnumpy.layers", "qualname": "MaxPoolLayer.getDeltas", "kind": "function", "doc": "<p>Calculates gradients for each neuron in this layer.</p>\n\n<p>These gradients include only the derivative of the cost function with respect to\nthe inputs, since there are no weights or biases associated with this layer type.\nNote that these gradients still need to be calculated in order to propagate derivatives\nbackwards from subsequent layers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>outputDeltas</strong> (numpy.ndarray):\nThe derivative of the cost function with respect to each of the outputs of this layer.\nEquivalently, the derivative of the cost function with respect to each of the inputs of the next layer\n(if there is a next layer).\nHas dimensions <code>(batchSize, depth, outputSize, outputSize)</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outputDeltas</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.models": {"fullname": "deeplearningnumpy.models", "modulename": "deeplearningnumpy.models", "kind": "module", "doc": "<p></p>\n"}, "deeplearningnumpy.models.NeuralNetwork": {"fullname": "deeplearningnumpy.models.NeuralNetwork", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork", "kind": "class", "doc": "<p>Represents a neural network, which may be fully connected or convolutional.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>name</strong> (str):\nA string identifier for the neural network e.g. for naming weights files.</li>\n<li><strong>layers</strong> (array_like):\nA list of layers that comprise the neural network. Inputs are propagated through this set of layers\nsequentially from start to finish when the <code>forward</code> method is called.</li>\n</ul>\n"}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"fullname": "deeplearningnumpy.models.NeuralNetwork.__init__", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">layers</span></span>)</span>"}, "deeplearningnumpy.models.NeuralNetwork.forward": {"fullname": "deeplearningnumpy.models.NeuralNetwork.forward", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork.forward", "kind": "function", "doc": "<p>Performs a forward pass of the network.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (numpy.ndarray):\nThe inputs to the network, which should match the dimensions required for\nthe input to the <code>forward</code> method of the first layer in the network.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"fullname": "deeplearningnumpy.models.NeuralNetwork.getOutputs", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork.getOutputs", "kind": "function", "doc": "<p>Returns the outputs from the last layer of the network produced by the\nmost recent call to <code>forward</code>.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>numpy.ndarray</strong>: The outputs of the last layer, whose dimensions match those of the\noutput of the <code>forward</code> method in the last layer of the network.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"fullname": "deeplearningnumpy.models.NeuralNetwork.saveWeights", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork.saveWeights", "kind": "function", "doc": "<p>Saves the current weights for the network in a pickle file.</p>\n\n<p>The file is named as <code>{network_name}.pkl</code>, and saved in the\n<code>deeplearningnumpy/data/</code> directory.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"fullname": "deeplearningnumpy.models.NeuralNetwork.loadWeights", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork.loadWeights", "kind": "function", "doc": "<p>Loads the weights for this network from the appropriate pickle file (if it exists).</p>\n\n<p>The file that is read is <code>deeplearningnumpy/data/{network_name}.pkl</code>.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>FileNotFoundError</strong>: If the file for the network does not exist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"fullname": "deeplearningnumpy.models.NeuralNetwork.updateWeights", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork.updateWeights", "kind": "function", "doc": "<p>Perform weight updates for all layers in the network.</p>\n\n<p>A forward pass is made prior to updating weights to ensure that the layer outputs\nare those produced by inputting <code>inputs</code>. The weights are then updated to\nbring the outputs closer to <code>expectedOutputs</code>, according to <code>costFunction</code> and \ncontrolled by the <code>learningRate</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (numpy.ndarray):\nThe inputs to the network, which should match the dimensions required for\nthe input to the <code>forward</code> method of the first layer in the network.</li>\n<li><strong>expectedOutputs</strong> (numpy.ndarray):\nThe desired values for the network's outputs. This parameter should have the same dimensions as that\nwhich would be produced by the network's <code>forward</code> method.</li>\n<li><strong>costFunction</strong> (CostFunction):\nA cost function whose derivative is calculated with respect to the outputs of the network\n(i.e. the outputs of the last layer).</li>\n<li><strong>learningRate</strong> (float):\nControls the amount by which the weights and biases of each layer are changed on each step. \nBoth the weights and biases of each layer are updated at the same rate.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p><code>CostFunction</code> is any of <code>MSE</code>, <code>BinaryCrossEntropy</code>, or <code>CategoricalCrossEntropy</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span>, </span><span class=\"param\"><span class=\"n\">expectedOutputs</span>, </span><span class=\"param\"><span class=\"n\">costFunction</span>, </span><span class=\"param\"><span class=\"n\">learningRate</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.models.NeuralNetwork.train": {"fullname": "deeplearningnumpy.models.NeuralNetwork.train", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork.train", "kind": "function", "doc": "<p>Trains the network using stochastic gradient descent.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (numpy.ndarray):\nThe training inputs. The first dimension equals the total number of input samples (not batches).</li>\n<li><strong>Y</strong> (numpy.ndarray):\nThe desired training outputs. The first dimension equals the total number of input samples (not batches).</li>\n<li><strong>costFunction</strong> (CostFunction):\nA cost function to evaluate the performance of the neural network.</li>\n<li><strong>batchSize</strong> (int):\nThe number of input samples to include in each batch.</li>\n<li><strong>epochs</strong> (int, optional):\nThe number of times to iterate through the full training set. Defaults to 10.</li>\n<li><strong>learningRate</strong> (float, optional):\nControls the rate of learning. A small value of <code>learningRate</code> will lead to slow training,\nbut a large value will cause training instability. Defaults to 0.1.</li>\n<li><strong>checkGradients</strong> (bool, optional):\nWhether to perform gradient checking. This was used for verifying the gradients computed through\nbackpropagation were correct, and is therefore unlikely to be useful to a user. Defaults to False.</li>\n<li><strong>testImages</strong> (np.ndarray, optional):\nTest data to evaluate the accuracy of the model on a test set during the training process.\nDefaults to [].</li>\n<li><strong>testLabels</strong> (np.ndarray, optional):\nCorresponding labels for <code>testImages</code> to evaluate the accuracy of the model on a test set during\nthe training process. Defaults to [].</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p><code>CostFunction</code> is any of <code>MSE</code>, <code>BinaryCrossEntropy</code>, or <code>CategoricalCrossEntropy</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">costFunction</span>,</span><span class=\"param\">\t<span class=\"n\">batchSize</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">learningRate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">checkGradients</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">testImages</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">testLabels</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"fullname": "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients", "modulename": "deeplearningnumpy.models", "qualname": "NeuralNetwork.getEstimatedGradients", "kind": "function", "doc": "<p>Numerically estimates the partial derivatives of the cost function w.r.t each weight.</p>\n\n<p>This is used in gradient checking as an alternative way of computing gradients other\nthan backpropagation, but is unlikely to be useful to a user.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (numpy.ndarray):\nThe inputs used for evaluating cost, and hence estimating derivatives.</li>\n<li><strong>yReal</strong> (numpy.ndarray):\nThe correct outputs for the given inputs, used for evaluating cost.</li>\n<li><strong>costFunction</strong> (CostFunction):\nThe cost function used for taking derivatives.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>array-like</strong>: The estimated gradients with respect to the weights and biases of each layer.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p><code>CostFunction</code> is any of <code>MSE</code>, <code>BinaryCrossEntropy</code>, or <code>CategoricalCrossEntropy</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inputs</span>, </span><span class=\"param\"><span class=\"n\">yReal</span>, </span><span class=\"param\"><span class=\"n\">costFunction</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}}, "docInfo": {"deeplearningnumpy": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "deeplearningnumpy.activations": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "deeplearningnumpy.activations.ActivationReLU": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "deeplearningnumpy.activations.ActivationReLU.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 79}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 83}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 65}, "deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 104}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 88}, "deeplearningnumpy.activations.ActivationLinear": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "deeplearningnumpy.activations.ActivationLinear.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 74}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 78}, "deeplearningnumpy.activations.ActivationLogistic": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 86}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 89}, "deeplearningnumpy.activations.ActivationTanh": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "deeplearningnumpy.activations.ActivationTanh.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 89}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 88}, "deeplearningnumpy.activations.ActivationSoftmax": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 44}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 89}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 91}, "deeplearningnumpy.cost_functions": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "deeplearningnumpy.cost_functions.MSE": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "deeplearningnumpy.cost_functions.MSE.getCost": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 99}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 102}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 99}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 102}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 99}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 128}, "deeplearningnumpy.layers": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "deeplearningnumpy.layers.Layer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "deeplearningnumpy.layers.Layer.updateWeights": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 92}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 167}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 47}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 47}, "deeplearningnumpy.layers.DenseLayer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 89}, "deeplearningnumpy.layers.DenseLayer.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "deeplearningnumpy.layers.DenseLayer.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 64}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 97}, "deeplearningnumpy.layers.ConvolutionalLayer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 182}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 3}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 63}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 195}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 99}, "deeplearningnumpy.layers.MaxPoolLayer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 65}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 3}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 50}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 88}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 125}, "deeplearningnumpy.models": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "deeplearningnumpy.models.NeuralNetwork": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 81}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 3}, "deeplearningnumpy.models.NeuralNetwork.forward": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 53}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 63}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 35}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 53}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 237}, "deeplearningnumpy.models.NeuralNetwork.train": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 289}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 155}}, "length": 61, "save": true}, "index": {"qualname": {"root": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {"deeplearningnumpy.activations.ActivationReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.activations.ActivationLinear": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"deeplearningnumpy.activations.ActivationLogistic": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}}, "df": 3}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.activations.ActivationTanh": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}}, "df": 10}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 9}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}}, "df": 5}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.cost_functions.MSE": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 5}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}}, "df": 4}}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 9}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}, "fullname": {"root": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}}, "df": 5, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy": {"tf": 1}, "deeplearningnumpy.activations": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers": {"tf": 1}, "deeplearningnumpy.layers.Layer": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 61}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}}, "df": 4}}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 20, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {"deeplearningnumpy.activations.ActivationReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.activations.ActivationLinear": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"deeplearningnumpy.activations.ActivationLogistic": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}}, "df": 3}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.activations.ActivationTanh": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}}, "df": 10}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.cost_functions": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 10}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 9}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}}, "df": 5}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.cost_functions": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 10}}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.cost_functions.MSE": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 5}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 10}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}}, "df": 5, "s": {"docs": {"deeplearningnumpy.layers": {"tf": 1}, "deeplearningnumpy.layers.Layer": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 20}}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 9}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}, "1": {"0": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}, "docs": {"deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 3}, "docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 2.8284271247461903}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 3.7416573867739413}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 4.242640687119285}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 4.242640687119285}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 4.242640687119285}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 4.242640687119285}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 4.242640687119285}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 4.242640687119285}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 4.242640687119285}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 3.1622776601683795}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 3.1622776601683795}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 4}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 6.164414002968976}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 5.477225575051661}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 4}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 3.7416573867739413}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 3.4641016151377544}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 3.7416573867739413}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 3.1622776601683795}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 3.1622776601683795}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 3.1622776601683795}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 5.0990195135927845}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 9.055385138137417}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 4.69041575982343}}, "df": 42, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 37}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 18, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 2}}}}}}, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 7}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 3}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 4}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "x": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}}, "df": 3}}}}}}}, "doc": {"root": {"0": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 6}, "1": {"0": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}, "docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 15}, "2": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}}, "df": 2}, "4": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}, "docs": {"deeplearningnumpy": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationReLU": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 5.0990195135927845}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 5.0990195135927845}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 4.358898943540674}, "deeplearningnumpy.activations.ActivationLeakyReLU.__init__": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 5.744562646538029}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 5.291502622129181}, "deeplearningnumpy.activations.ActivationLinear": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 5.0990195135927845}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 5.0990195135927845}, "deeplearningnumpy.activations.ActivationLogistic": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 5.656854249492381}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 5.656854249492381}, "deeplearningnumpy.activations.ActivationTanh": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 5.744562646538029}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 5.5677643628300215}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 2.449489742783178}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 5.0990195135927845}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 5.0990195135927845}, "deeplearningnumpy.cost_functions": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.MSE": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 5.830951894845301}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 5.830951894845301}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 5.830951894845301}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 5.830951894845301}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 5.830951894845301}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 5.830951894845301}, "deeplearningnumpy.layers": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 4.69041575982343}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 7}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.DenseLayer": {"tf": 5.477225575051661}, "deeplearningnumpy.layers.DenseLayer.__init__": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 4.795831523312719}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 4.69041575982343}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 7.54983443527075}, "deeplearningnumpy.layers.ConvolutionalLayer.__init__": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 4.358898943540674}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 8.660254037844387}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 4.69041575982343}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 4.58257569495584}, "deeplearningnumpy.layers.MaxPoolLayer.__init__": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 4.358898943540674}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 6.164414002968976}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 4.69041575982343}, "deeplearningnumpy.models": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 4.795831523312719}, "deeplearningnumpy.models.NeuralNetwork.__init__": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 4.123105625617661}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 4.242640687119285}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 3.1622776601683795}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 4.358898943540674}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 7.810249675906654}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 9.055385138137417}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 7.3484692283495345}}, "df": 61, "r": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationReLU": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}}, "df": 3}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 24}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 17}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 6}}}, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 8}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.activations.ActivationReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}}, "df": 3}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"deeplearningnumpy.activations.ActivationLogistic": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 4}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 2.6457513110645907}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 2}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 2}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 2.23606797749979}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2.23606797749979}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 16, "s": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationReLU": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}}, "df": 3}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 2}}, "df": 4}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}}, "r": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}, "d": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 2.449489742783178}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 16, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.activations.ActivationReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}}, "df": 23, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}}, "df": 17}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}}}}}}}}, "n": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1, "d": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.layers.Layer": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 2}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.4142135623730951}}, "df": 23}, "y": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 5}}, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 22, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2}}, "df": 14}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 5}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 9}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}}, "df": 6}}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.activations.ActivationReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 2}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 2}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.4142135623730951}}, "df": 38, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}}, "df": 1}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1, "y": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 2}}, "df": 14, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.7320508075688772}}, "df": 4}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 9}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}}, "df": 1, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 2.23606797749979}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 2.23606797749979}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.7320508075688772}}, "df": 2}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 1, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}}, "df": 6}, "d": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}}, "df": 3}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}}, "df": 1, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 32}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 2}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 2, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}}, "df": 5}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 2}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 10, "h": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 3.3166247903554}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 3.1622776601683795}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 2}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 3.4641016151377544}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 3.4641016151377544}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 3.605551275463989}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 3.605551275463989}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 3.605551275463989}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 3.605551275463989}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 3.605551275463989}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 4}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 2.8284271247461903}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 2.6457513110645907}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 2.449489742783178}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 2.449489742783178}, "deeplearningnumpy.layers.DenseLayer": {"tf": 2.23606797749979}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 2.449489742783178}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 3.4641016151377544}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 3.7416573867739413}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 2.449489742783178}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 3.3166247903554}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 3.4641016151377544}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 2}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 2.449489742783178}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 3.1622776601683795}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 2.8284271247461903}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 3.1622776601683795}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 2}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 2.23606797749979}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 4.898979485566356}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 4.47213595499958}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 2.8284271247461903}}, "df": 43, "n": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 3}, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.4142135623730951}}, "df": 3}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.4142135623730951}}, "df": 3, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 8}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 11}, "n": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 3}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 18}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 2.23606797749979}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 2.23606797749979}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 2.23606797749979}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2.8284271247461903}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 3.7416573867739413}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.7320508075688772}}, "df": 37, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 6}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.activations.ActivationTanh": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}}, "df": 2, "^": {"2": {"docs": {"deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}}, "df": 3}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 2.6457513110645907}}, "df": 2}}}, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2, "n": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 14, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.7320508075688772}}, "df": 18, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 2}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.7320508075688772}}, "df": 27, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.7320508075688772}}, "df": 5}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 2.23606797749979}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 6, "o": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 2}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.7320508075688772}}, "df": 28}, "t": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1.4142135623730951}}, "df": 8}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 2.23606797749979}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.4142135623730951}}, "df": 2, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}}}}}}}}, "n": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}}, "df": 1, "p": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 13}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 2}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 2}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.4142135623730951}}, "df": 34}}}}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}}, "df": 5}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 11, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 4, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2.449489742783178}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 16}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.4142135623730951}}, "df": 4}}, "w": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 2}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.4142135623730951}}, "df": 22}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 2}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 2, "t": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 4, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 2, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 3, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 7, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 2.23606797749979}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 15}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 19, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.4142135623730951}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2}}, "df": 21}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 2}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 10}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 10}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 2.449489742783178}}, "df": 1, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}}, "df": 13, "s": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 2.449489742783178}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 2}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 2.449489742783178}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 2}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 2.449489742783178}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 2}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 2}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2.23606797749979}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 15, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.4142135623730951}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 3}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "f": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 2.23606797749979}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 2.23606797749979}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 2.6457513110645907}, "deeplearningnumpy.layers.Layer": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 2.449489742783178}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer": {"tf": 2.23606797749979}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 2.6457513110645907}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 2.449489742783178}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 2.6457513110645907}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 2.6457513110645907}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 2.23606797749979}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2.449489742783178}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 3.1622776601683795}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 2}}, "df": 40}, "n": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 4}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.7320508075688772}}, "df": 7}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}}, "df": 4, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 2.23606797749979}}, "df": 3}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 7, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {"deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 11}}}}}}}}}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.4142135623730951}}, "df": 18}}}, "^": {"docs": {}, "df": 0, "x": {"docs": {"deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.4142135623730951}}, "df": 1}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 5}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.cost_functions.MSE": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 3, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 3}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.7320508075688772}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 5, "o": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}}, "df": 6, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.7320508075688772}}, "df": 3}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 21}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}}, "df": 1}, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 7}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 2}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}}, "df": 3}}, "w": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.7320508075688772}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "^": {"2": {"docs": {"deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 5}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}}, "df": 3}, "b": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 1}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 1, "d": {"docs": {"deeplearningnumpy.cost_functions.MSE": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 11}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 2.23606797749979}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 22}, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 2}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 33}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.forward": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 18, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.7320508075688772}}, "df": 8}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 9}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 5}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 2.23606797749979}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "g": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}}, "df": 6}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}}, "df": 1, "d": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 6}}}}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU": {"tf": 1}}, "df": 1}, "n": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2, "s": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}}}, "w": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.activations.ActivationReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLeakyReLU.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLinear.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 2}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 21}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 2}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 2}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2, "s": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 2}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.loadWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 12}, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 9}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.7320508075688772}}, "df": 7}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 2}, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}, "x": {"docs": {"deeplearningnumpy.activations.ActivationLeakyReLU.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationLogistic.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationTanh.forward": {"tf": 1.7320508075688772}, "deeplearningnumpy.activations.ActivationTanh.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 7}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1.4142135623730951}, "deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 2}}, "df": 8}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.forward": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}}, "df": 5}, "d": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 3}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.cost_functions.MSE": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.Layer.getWeightGradients": {"tf": 1}, "deeplearningnumpy.layers.Layer.getBiasGradients": {"tf": 1}, "deeplearningnumpy.layers.DenseLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.ConvolutionalLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.layers.MaxPoolLayer.getDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 2}}, "df": 18, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 2}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.7320508075688772}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1.7320508075688772}}, "df": 4}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}}, "df": 1}, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1, "d": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.saveWeights": {"tf": 1}}, "df": 1}}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.activations.ActivationSoftmax": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"deeplearningnumpy.cost_functions.MSE": {"tf": 1}}, "df": 1, "s": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "x": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer.forward": {"tf": 1.4142135623730951}, "deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1.7320508075688772}}, "df": 3, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.Layer": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"deeplearningnumpy.layers.Layer.updateWeights": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"deeplearningnumpy.layers.MaxPoolLayer.maxPool": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"deeplearningnumpy.models.NeuralNetwork.forward": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 3}}}, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork": {"tf": 1}}, "df": 1}, "d": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.Layer.getOutputDeltas": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.updateWeights": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}, "deeplearningnumpy.layers.MaxPoolLayer": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"deeplearningnumpy.models.NeuralNetwork.getOutputs": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {"deeplearningnumpy.models.NeuralNetwork.train": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1.4142135623730951}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1.4142135623730951}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.cost_functions.MSE.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.MSE.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.BinaryCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getCost": {"tf": 1}, "deeplearningnumpy.cost_functions.CategoricalCrossEntropy.getDerivative": {"tf": 1}, "deeplearningnumpy.models.NeuralNetwork.getEstimatedGradients": {"tf": 1}}, "df": 7}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {"deeplearningnumpy.layers.DenseLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}}, "df": 2}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"deeplearningnumpy.layers.ConvolutionalLayer": {"tf": 1}, "deeplearningnumpy.layers.ConvolutionalLayer.crossCorrelate": {"tf": 1}}, "df": 2}}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();